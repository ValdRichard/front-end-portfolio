{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../../../servicios/api.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/common\";\nfunction SoftSkillsUpdateComponent_div_8_p_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 12);\n    i0.ɵɵtext(1, \" El campo es requerido. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction SoftSkillsUpdateComponent_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, SoftSkillsUpdateComponent_div_8_p_1_Template, 2, 0, \"p\", 11);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.NombreHabilidad == null ? null : ctx_r0.NombreHabilidad.hasError(\"required\"));\n  }\n}\nfunction SoftSkillsUpdateComponent_div_13_p_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 12);\n    i0.ɵɵtext(1, \" El campo es requerido. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction SoftSkillsUpdateComponent_div_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, SoftSkillsUpdateComponent_div_13_p_1_Template, 2, 0, \"p\", 11);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.Porcentaje == null ? null : ctx_r1.Porcentaje.hasError(\"required\"));\n  }\n}\nconst _c0 = function (a0, a1) {\n  return {\n    \"is-invalid\": a0,\n    \"is-valid\": a1\n  };\n};\nexport class SoftSkillsUpdateComponent {\n  constructor(formBuilder, apiService, router, route) {\n    this.formBuilder = formBuilder;\n    this.apiService = apiService;\n    this.router = router;\n    this.route = route;\n    this.id = '';\n    this.form = this.formBuilder.group({\n      //ACA SE PUEDE PONER SI ES MAIL O OTROS VALIDATORS\n      nombreHabilidad: ['', [Validators.required, Validators.minLength(5)]],\n      porcentaje: ['', [Validators.required, Validators.minLength(5)]]\n    });\n  }\n  ngOnInit() {\n    this.apiService.getSoftSkill(this.route.snapshot.paramMap.get('id')).subscribe(softSkill => {\n      this.softSkill = softSkill;\n      this.form.controls['nombreHabilidad'].setValue(softSkill.nombreHabilidad);\n      this.form.controls['porcentaje'].setValue(softSkill.porcentaje);\n    });\n  }\n  get NombreHabilidad() {\n    return this.form.get('nombreHabilidad');\n  }\n  get Porcentaje() {\n    return this.form.get('porcentaje');\n  }\n  onEnviar(event) {\n    event.preventDefault();\n    this.apiService.updateSoftSkill(this.form.value, this.route.snapshot.paramMap.get('id')).subscribe(data => {\n      this.router.navigate(['portfolio']);\n    });\n  }\n}\nSoftSkillsUpdateComponent.ɵfac = function SoftSkillsUpdateComponent_Factory(t) {\n  return new (t || SoftSkillsUpdateComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ApiService), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i3.ActivatedRoute));\n};\nSoftSkillsUpdateComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: SoftSkillsUpdateComponent,\n  selectors: [[\"app-soft-skills-update\"]],\n  decls: 17,\n  vars: 11,\n  consts: [[1, \"container\", \"bg-medium-dark-blue\", \"p-3\", \"text-light\"], [1, \"m-4\"], [1, \"m-4\", 3, \"formGroup\", \"ngSubmit\"], [1, \"mb-3\"], [\"for\", \"nombreHabilidad\", 1, \"form-label\"], [\"formControlName\", \"nombreHabilidad\", \"name\", \"nombreHabilidad\", \"type\", \"text\", \"id\", \"nombreHabilidad\", \"aria-describedby\", \"nombreHabilidad\", 1, \"form-control\", 3, \"ngClass\"], [4, \"ngIf\"], [\"for\", \"porcentaje\", 1, \"form-label\"], [\"formControlName\", \"porcentaje\", \"name\", \"porcentaje\", \"type\", \"text\", \"id\", \"porcentaje\", \"aria-describedby\", \"porcentaje\", 1, \"form-control\", 3, \"ngClass\"], [1, \"d-grid\"], [1, \"btn\", \"btn-primary\"], [\"class\", \"text-danger\", 4, \"ngIf\"], [1, \"text-danger\"]],\n  template: function SoftSkillsUpdateComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"h1\", 1);\n      i0.ɵɵtext(2, \"Editar Soft Skill\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"form\", 2);\n      i0.ɵɵlistener(\"ngSubmit\", function SoftSkillsUpdateComponent_Template_form_ngSubmit_3_listener($event) {\n        return ctx.onEnviar($event);\n      });\n      i0.ɵɵelementStart(4, \"div\", 3)(5, \"label\", 4);\n      i0.ɵɵtext(6, \"Nombre de la Soft Skill\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(7, \"input\", 5);\n      i0.ɵɵtemplate(8, SoftSkillsUpdateComponent_div_8_Template, 2, 1, \"div\", 6);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(9, \"div\", 3)(10, \"label\", 7);\n      i0.ɵɵtext(11, \"Porcentaje\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(12, \"input\", 8);\n      i0.ɵɵtemplate(13, SoftSkillsUpdateComponent_div_13_Template, 2, 1, \"div\", 6);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(14, \"div\", 9)(15, \"button\", 10);\n      i0.ɵɵtext(16, \"Ingresar\");\n      i0.ɵɵelementEnd()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"formGroup\", ctx.form);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(5, _c0, (ctx.NombreHabilidad == null ? null : ctx.NombreHabilidad.errors) && (ctx.NombreHabilidad == null ? null : ctx.NombreHabilidad.touched), !(ctx.NombreHabilidad == null ? null : ctx.NombreHabilidad.errors) && (ctx.NombreHabilidad == null ? null : ctx.NombreHabilidad.touched)));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", (ctx.NombreHabilidad == null ? null : ctx.NombreHabilidad.errors) && (ctx.NombreHabilidad == null ? null : ctx.NombreHabilidad.touched));\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(8, _c0, (ctx.Porcentaje == null ? null : ctx.Porcentaje.errors) && (ctx.Porcentaje == null ? null : ctx.Porcentaje.touched), !(ctx.Porcentaje == null ? null : ctx.Porcentaje.errors) && (ctx.Porcentaje == null ? null : ctx.Porcentaje.touched)));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", (ctx.Porcentaje == null ? null : ctx.Porcentaje.errors) && (ctx.Porcentaje == null ? null : ctx.Porcentaje.touched));\n    }\n  },\n  dependencies: [i4.NgClass, i4.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["Validators","i0","SoftSkillsUpdateComponent","constructor","formBuilder","apiService","router","route","form","group","nombreHabilidad","required","minLength","porcentaje","ngOnInit","getSoftSkill","snapshot","paramMap","get","subscribe","softSkill","controls","setValue","NombreHabilidad","Porcentaje","onEnviar","event","preventDefault","updateSoftSkill","value","data","navigate","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["/home/valdiviaricardo/Documents/YOPROGRAMO/SPRING/front-end-portfolio/src/app/components/soft-skills/soft-skills-update/soft-skills-update.component.ts","/home/valdiviaricardo/Documents/YOPROGRAMO/SPRING/front-end-portfolio/src/app/components/soft-skills/soft-skills-update/soft-skills-update.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { ApiService } from '../../../servicios/api.service';\n\n@Component({\n  selector: 'app-soft-skills-update',\n  templateUrl: './soft-skills-update.component.html',\n  styleUrls: ['./soft-skills-update.component.css']\n})\nexport class SoftSkillsUpdateComponent implements OnInit {\n\n  form:FormGroup;\n  id: string = '';\n  softSkill: any;\n\n  constructor(\n    private formBuilder:FormBuilder,\n    private apiService: ApiService,\n    private router: Router,\n    private route: ActivatedRoute\n  ){\n    this.form = this.formBuilder.group({\n      //ACA SE PUEDE PONER SI ES MAIL O OTROS VALIDATORS\n      nombreHabilidad:['', [Validators.required, Validators.minLength(5)]],\n      porcentaje:['', [Validators.required, Validators.minLength(5)]],\n    });\n  }\n\n  ngOnInit(): void {\n    this.apiService.getSoftSkill(this.route.snapshot.paramMap.get('id')).subscribe(\n      (softSkill: any) => {\n        this.softSkill = softSkill;\n        this.form.controls['nombreHabilidad'].setValue(softSkill.nombreHabilidad);\n        this.form.controls['porcentaje'].setValue(softSkill.porcentaje);\n      }\n    )\n  }\n  \n  get NombreHabilidad(){\n    return this.form.get('nombreHabilidad');\n  }\n  get Porcentaje(){\n    return this.form.get('porcentaje');\n  }\n  \n  onEnviar(event:Event){\n    event.preventDefault();\n    this.apiService.updateSoftSkill(this.form.value, this.route.snapshot.paramMap.get('id'))\n      .subscribe(data=>{\n        this.router.navigate(['portfolio'])\n      })\n  }\n}\n","<div class=\"container bg-medium-dark-blue p-3 text-light\">\n    <h1 class=\"m-4\">Editar Soft Skill</h1>\n    <form class=\"m-4\" [formGroup]=\"form\" (ngSubmit)=\"onEnviar($event)\">\n        <div class=\"mb-3\">\n            <label for=\"nombreHabilidad\" class=\"form-label\">Nombre de la Soft Skill</label>\n            <input formControlName=\"nombreHabilidad\" name=\"nombreHabilidad\" type=\"text\" class=\"form-control\" id=\"nombreHabilidad\" aria-describedby=\"nombreHabilidad\"\n            [ngClass]=\"{'is-invalid':NombreHabilidad?.errors && NombreHabilidad?.touched, 'is-valid': !NombreHabilidad?.errors && NombreHabilidad?.touched}\">\n            <div *ngIf=\"NombreHabilidad?.errors && NombreHabilidad?.touched\">\n                <p *ngIf=\"NombreHabilidad?.hasError('required')\" class=\"text-danger\">\n                    El campo es requerido.\n                </p>\n            </div>\n        </div>\n        <div class=\"mb-3\">\n            <label for=\"porcentaje\" class=\"form-label\">Porcentaje</label>\n            <input formControlName=\"porcentaje\" name=\"porcentaje\" type=\"text\" class=\"form-control\" id=\"porcentaje\" aria-describedby=\"porcentaje\"\n            [ngClass]=\"{'is-invalid':Porcentaje?.errors && Porcentaje?.touched, 'is-valid': !Porcentaje?.errors && Porcentaje?.touched}\">\n            <div *ngIf=\"Porcentaje?.errors && Porcentaje?.touched\">\n                <p *ngIf=\"Porcentaje?.hasError('required')\" class=\"text-danger\">\n                    El campo es requerido.\n                </p>\n            </div>\n        </div>\n        <div class=\"d-grid\">\n            <button class=\"btn btn-primary\">Ingresar</button>\n        </div>\n    </form>\n</div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}