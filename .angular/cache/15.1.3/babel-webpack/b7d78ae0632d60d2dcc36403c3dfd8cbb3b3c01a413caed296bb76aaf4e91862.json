{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../servicios/api.service\";\nexport class AuthInterceptor {\n  constructor(apiService) {\n    this.apiService = apiService;\n  }\n  intercept(request, next) {\n    const token = this.apiService.getToken();\n    if (token) {\n      const cloned = request.clone({\n        headers: request.headers.set('Authorization', `Bearer ${token}`)\n      });\n      return next.handle(cloned);\n    }\n    return next.handle(request);\n  }\n}\nAuthInterceptor.ɵfac = function AuthInterceptor_Factory(t) {\n  return new (t || AuthInterceptor)(i0.ɵɵinject(i1.ApiService));\n};\nAuthInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthInterceptor,\n  factory: AuthInterceptor.ɵfac\n});","map":{"version":3,"mappings":";;AAYA,OAAM,MAAOA,eAAe;EAE1BC,YACUC,UAAsB;IAAtB,eAAU,GAAVA,UAAU;EACjB;EAEHC,SAAS,CAACC,OAA6B,EAAEC,IAAiB;IACxD,MAAMC,KAAK,GAAG,IAAI,CAACJ,UAAU,CAACK,QAAQ,EAAE;IAExC,IAAGD,KAAK,EAAC;MACP,MAAME,MAAM,GAAGJ,OAAO,CAACK,KAAK,CAAC;QAC3BC,OAAO,EAAEN,OAAO,CAACM,OAAO,CAACC,GAAG,CAAC,eAAe,EAAE,UAAUL,KAAK,EAAE;OAChE,CAAC;MACF,OAAOD,IAAI,CAACO,MAAM,CAACJ,MAAM,CAAC;;IAG5B,OAAOH,IAAI,CAACO,MAAM,CAACR,OAAO,CAAC;EAC7B;;AAjBWJ,eAAe;mBAAfA,eAAe;AAAA;AAAfA,eAAe;SAAfA,eAAe;EAAAa,SAAfb,eAAe;AAAA","names":["AuthInterceptor","constructor","apiService","intercept","request","next","token","getToken","cloned","clone","headers","set","handle","factory"],"sourceRoot":"","sources":["/home/valdiviaricardo/Documents/YOPROGRAMO/SPRING/front-end-portfolio/src/app/helpers/auth.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { ApiService } from '../servicios/api.service';\n\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n\n  constructor(\n    private apiService: ApiService\n  ) {}\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    const token = this.apiService.getToken();\n\n    if(token){\n      const cloned = request.clone({\n        headers: request.headers.set('Authorization', `Bearer ${token}`)\n      });\n      return next.handle(cloned);  \n    }\n\n    return next.handle(request);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}